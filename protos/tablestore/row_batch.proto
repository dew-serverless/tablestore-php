syntax = "proto2";

option php_namespace = "Protos";
option php_metadata_namespace = "Protos\\Metadata";

package acs.tablestore.row.batch;

import "tablestore.proto";
import "row.proto";

// ---------------------------------------------------------------------------
// Batch Get Row
// ---------------------------------------------------------------------------

message BatchGetRowRequest {
  repeated TableInBatchGetRowRequest tables = 1;
}

message BatchGetRowResponse {
  repeated TableInBatchGetRowResponse tables = 1;
}

message TableInBatchGetRowRequest {
  required string table_name = 1;
  repeated bytes primary_key = 2;
  repeated bytes token = 3;
  repeated string columns_to_get = 4;
  optional TimeRange time_range = 5;
  optional int32 max_versions = 6;
  optional bool cache_blocks = 7 [default = true];
  optional bytes filter = 8;
  optional string start_column = 9;
  optional string end_column = 10;
}

message TableInBatchGetRowResponse {
  required string table_name = 1;
  repeated RowInBatchGetRowResponse rows = 2;
}

message RowInBatchGetRowResponse {
  required bool is_ok = 1 [default = true];
  optional Error error = 2;
  optional ConsumedCapacity consumed = 3;
  optional bytes row = 4;
  optional bytes next_token = 5;
}

// ---------------------------------------------------------------------------
// Batch Write Row
// ---------------------------------------------------------------------------

message BatchWriteRowRequest {
  repeated TableInBatchWriteRowRequest tables = 1;
}

message BatchWriteRowResponse {
  repeated TableInBatchWriteRowResponse tables = 1;
}

message TableInBatchWriteRowRequest {
  required string table_name = 1;
  repeated RowInBatchWriteRowRequest rows = 2;
}

message RowInBatchWriteRowRequest {
  required OperationType type = 1;
  required bytes row_change = 2;
  required Condition condition = 3;
  optional ReturnType return_type = 4;
}

message TableInBatchWriteRowResponse {
  required string table_name = 1;
  repeated RowInBatchWriteRowResponse put_rows = 2;
  repeated RowInBatchWriteRowResponse update_rows = 3;
  repeated RowInBatchWriteRowResponse delete_rows = 4;
}

message RowInBatchWriteRowResponse {
  required bool is_ok = 1 [default = true];
  optional Error error = 2;
  optional ConsumedCapacity consumed = 3;
  optional bytes row = 4;
}

enum OperationType {
  PUT = 1;
  UPDATE = 2;
  DELETE = 3;
}
